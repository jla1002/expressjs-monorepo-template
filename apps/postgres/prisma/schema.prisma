generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String   @map("first_name")
  lastName        String   @map("last_name")
  passwordHash    String   @map("password_hash")
  isActive        Boolean  @default(true) @map("is_active")
  role            UserRole @default(USER)
  preferredLocale String   @default("en") @map("preferred_locale")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  sessions UserSession[]
  cases    Case[]

  @@index([email])
  @@map("user")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("user_session")
}

model Case {
  id            String     @id @default(cuid())
  caseNumber    String     @unique @map("case_number")
  title         String
  description   String?
  status        CaseStatus @default(OPEN)
  priority      Priority   @default(MEDIUM)
  assignedToId  String?    @map("assigned_to_id")
  metadata      Json       @default("{}")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  closedAt      DateTime?  @map("closed_at")

  assignedTo User?      @relation(fields: [assignedToId], references: [id])
  documents  Document[]
  notes      CaseNote[]

  @@index([caseNumber])
  @@index([status])
  @@index([assignedToId])
  @@map("case")
}

model Document {
  id          String       @id @default(cuid())
  caseId      String       @map("case_id")
  fileName    String       @map("file_name")
  fileType    String       @map("file_type")
  fileSize    Int          @map("file_size")
  storageUrl  String       @map("storage_url")
  category    String
  uploadedBy  String       @map("uploaded_by")
  createdAt   DateTime     @default(now()) @map("created_at")

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@map("document")
}

model CaseNote {
  id        String   @id @default(cuid())
  caseId    String   @map("case_id")
  content   String
  authorId  String   @map("author_id")
  isPrivate Boolean  @default(false) @map("is_private")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@map("case_note")
}

model OnboardingSubmission {
  id              String   @id @default(cuid())
  referenceNumber String   @unique @map("reference_number")
  firstName       String   @map("first_name")
  lastName        String   @map("last_name")
  dateOfBirth     DateTime @map("date_of_birth")
  address1        String   @map("address1")
  address2        String?  @map("address2")
  townCity        String   @map("town_city")
  county          String?  @map("county")
  postcode        String   @map("postcode")
  role            String   @map("role")
  otherRole       String?  @map("other_role")
  submittedAt     DateTime @default(now()) @map("submitted_at")

  @@map("onboarding_submission")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
  VIEWER
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  PENDING_REVIEW
  CLOSED
  ARCHIVED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}